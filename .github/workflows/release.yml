name: Run Release Release

on:
  push:
    branches:
      - main

jobs:
  release-package:
    environment: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write # for googleapis/release-please-action to create release commit
      pull-requests: write # for googleapis/release-please-action to create release PR
      packages: read # for internal nuget reading

    steps:
      - uses: google-github-actions/release-please-action@db8f2c60ee802b3748b512940dde88eabd7b7e01 # v3
        id: release
        with:
          command: manifest
          token: ${{secrets.GITHUB_TOKEN}}
          default-branch: main
          release-type: simple
    outputs:
      release_created: ${{ steps.release.outputs.releases_created }}
      release_tag_name: ${{ steps.release.outputs.release_tag_name }}
      paths_released: ${{ steps.release.outputs.paths_released }}

  release:
    needs: release-package
    environment: publish
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      attestations: write
    if: ${{ needs.release-package.outputs.release_created }}
    strategy:
      matrix:
        release: ${{ fromJSON(needs.release-package.outputs.paths_released) }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          global-json-file: global.json
          source-url: https://nuget.pkg.github.com/open-feature/index.json

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: |
          dotnet build --configuration Release --no-restore -p:Deterministic=true

      - name: Pack
        run: |
          dotnet pack --configuration Release --no-build

      - name: Publish to Nuget
        run: |
          dotnet nuget push "${{ matrix.release }}/**/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_TOKEN }}

      # This will publish the attestations of all the artifacts, including the ones that are not published to a registry
      # It is important to prevent the publishing of the attestations of the artifacts that are not published to a registry
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
        with:
          subject-path: "${{ matrix.release }}/**/*.nupkg"

  sbom:
    runs-on: ubuntu-latest
    permissions:
      contents: write # upload sbom to a release
    needs: release-package
    if: ${{ needs.release-package.outputs.release_created }}
    strategy:
      matrix:
        release: ${{ fromJSON(needs.release-package.outputs.paths_released) }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          global-json-file: global.json
          source-url: https://nuget.pkg.github.com/open-feature/index.json

      - name: Install CycloneDX.NET
        run: dotnet tool install CycloneDX

      - name: Generate .NET BOM
        run: dotnet CycloneDX --json --exclude-dev -sv "${{ needs.release-package.outputs.release_tag_name }}" "${{ matrix.release }}/**/*.csproj"

      - name: Attach SBOM to artifact
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: gh release upload ${{ needs.release-package.outputs.release_tag_name }} bom.json
